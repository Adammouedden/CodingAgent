[
  {
    "commands": [
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "npx create-react-app wordle-game"
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "cd wordle-game"
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "del .\\src\\App.css .\\src\\App.test.js .\\src\\logo.svg .\\src\\reportWebVitals.js .\\src\\setupTests.js"
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "type nul > .\\src\\components\\Board.js"
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "type nul > .\\src\\components\\Row.js"
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "type nul > .\\src\\components\\Cell.js"
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "type nul > .\\src\\components\\Keyboard.js"
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "type nul > .\\src\\components\\Popup.js"
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "type nul > .\\src\\data\\wordlist.js"
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "type nul > .\\src\\App.css"
      },
      {
        "kind": "code",
        "filename": ".\\src\\index.js",
        "code": [
          "import React from 'react';",
          "import ReactDOM from 'react-dom/client';",
          "import './index.css';",
          "import App from './App';",
          "",
          "const root = ReactDOM.createRoot(document.getElementById('root'));",
          "root.render(",
          "  <React.StrictMode>",
          "    <App />",
          "  </React.StrictMode>",
          ");"
        ],
        "command": null
      },
      {
        "kind": "code",
        "filename": ".\\src\\index.css",
        "code": [
          "body {",
          "  margin: 0;",
          "  font-family: 'Helvetica Neue', Arial, sans-serif;",
          "  -webkit-font-smoothing: antialiased;",
          "  -moz-osx-font-smoothing: grayscale;",
          "  background-color: #1a1a1b;",
          "  color: #fff;",
          "  display: flex;",
          "  justify-content: center;",
          "  align-items: flex-start;",
          "  min-height: 100vh;",
          "  padding-top: 20px;",
          "}",
          "",
          "code {",
          "  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',",
          "    monospace;",
          "}",
          "",
          "#root {",
          "  width: 100%;",
          "  max-width: 500px;",
          "  display: flex;",
          "  flex-direction: column;",
          "  align-items: center;",
          "  padding: 20px;",
          "  box-sizing: border-box;",
          "}",
          "",
          "h1 {",
          "  color: #fff;",
          "  margin-bottom: 30px;",
          "  font-size: 2.5em;",
          "  letter-spacing: 2px;",
          "  text-transform: uppercase;",
          "  border-bottom: 1px solid #3c3c3c;",
          "  padding-bottom: 10px;",
          "  width: 100%;",
          "  text-align: center;",
          "}"
        ],
        "command": null
      },
      {
        "kind": "code",
        "filename": ".\\src\\data\\wordlist.js",
        "code": [
          "export const wordlist = [",
          "    \"APPLE\", \"BAKER\", \"CRANE\", \"DREAM\", \"EAGLE\", \"FROST\", \"GRAPE\", \"HOUSE\", \"IGLOO\", \"JAZZY\",",
          "    \"KNEEL\", \"LEMON\", \"MAGIC\", \"NIGHT\", \"OCEAN\", \"PIANO\", \"QUEEN\", \"ROBIN\", \"SNAKE\", \"TRAIN\",",
          "    \"UNITY\", \"VISTA\", \"WATER\", \"XYLEM\", \"YACHT\", \"ZEBRA\", \"BLIMP\", \"CLOUD\", \"DAISY\", \"FLAME\",",
          "    \"GLIDE\", \"HASTY\", \"INBOX\", \"JOUST\", \"KUDOS\", \"LUCKY\", \"MERRY\", \"NOISE\", \"OPERA\", \"PARTY\",",
          "    \"QUICK\", \"RIVER\", \"SHEEP\", \"TIGER\", \"UPSET\", \"VENUE\", \"WAVES\", \"XENON\", \"YIELD\", \"ZONAL\"",
          "];",
          "",
          "export const possibleAnswers = [",
          "    \"CRANE\", \"APPLE\", \"TRAIN\", \"WATER\", \"HOUSE\", \"MAGIC\", \"GRAPE\", \"OCEAN\", \"PIANO\", \"QUEEN\"",
          "];"
        ],
        "command": null
      },
      {
        "kind": "code",
        "filename": ".\\src\\components\\Cell.js",
        "code": [
          "import React from 'react';",
          "",
          "function Cell({ letter, status }) {",
          "  const cellClass = status ? `cell ${status}` : 'cell';",
          "  return (",
          "    <div className={cellClass}>",
          "      {letter}",
          "    </div>",
          "  );",
          "}",
          "",
          "export default Cell;"
        ],
        "command": null
      },
      {
        "kind": "code",
        "filename": ".\\src\\components\\Row.js",
        "code": [
          "import React from 'react';",
          "import Cell from './Cell';",
          "",
          "function Row({ guess, solution, isCurrentGuess, isGuessed }) {",
          "  const cells = [];",
          "  const solutionLetters = solution ? solution.split('') : [];",
          "  const guessLetters = guess ? guess.split('') : [];",
          "",
          "  // For a guessed row, calculate status",
          "  if (isGuessed && solution) {",
          "    const solutionLetterCounts = {};",
          "    solutionLetters.forEach(char => {",
          "      solutionLetterCounts[char] = (solutionLetterCounts[char] || 0) + 1;",
          "    });",
          "",
          "    const statuses = Array(5).fill('');",
          "",
          "    // First pass: find correct (green) letters",
          "    for (let i = 0; i < 5; i++) {",
          "      if (guessLetters[i] === solutionLetters[i]) {",
          "        statuses[i] = 'correct';",
          "        solutionLetterCounts[guessLetters[i]]--;",
          "      }",
          "    }",
          "",
          "    // Second pass: find present (yellow) and absent (grey) letters",
          "    for (let i = 0; i < 5; i++) {",
          "      if (statuses[i] === '') { // Only process letters not already marked correct",
          "        if (solutionLetterCounts[guessLetters[i]] > 0) {",
          "          statuses[i] = 'present';",
          "          solutionLetterCounts[guessLetters[i]]--;",
          "        } else {",
          "          statuses[i] = 'absent';",
          "        }",
          "      }",
          "    }",
          "",
          "    for (let i = 0; i < 5; i++) {",
          "      cells.push(<Cell key={i} letter={guessLetters[i]} status={statuses[i]} />);",
          "    }",
          "  } else {",
          "    // For current guess or empty rows, just display letters or empty cells",
          "    for (let i = 0; i < 5; i++) {",
          "      cells.push(<Cell key={i} letter={guessLetters[i] || ''} status={isCurrentGuess && guessLetters[i] ? 'filled' : ''} />);",
          "    }",
          "  }",
          "",
          "  return (",
          "    <div className=\"row\">",
          "      {cells}",
          "    </div>",
          "  );",
          "}",
          "",
          "export default Row;"
        ],
        "command": null
      },
      {
        "kind": "code",
        "filename": ".\\src\\components\\Board.js",
        "code": [
          "import React from 'react';",
          "import Row from './Row';",
          "",
          "const MAX_GUESSES = 6;",
          "",
          "function Board({ guesses, currentGuess, solution }) {",
          "  const boardRows = [];",
          "",
          "  // Render past guesses",
          "  for (let i = 0; i < guesses.length; i++) {",
          "    boardRows.push(<Row key={i} guess={guesses[i]} solution={solution} isGuessed={true} />);",
          "  }",
          "",
          "  // Render current guess",
          "  if (guesses.length < MAX_GUESSES) {",
          "    boardRows.push(<Row key={guesses.length} guess={currentGuess} solution={solution} isCurrentGuess={true} />);",
          "  }",
          "",
          "  // Render empty rows",
          "  for (let i = guesses.length + (guesses.length < MAX_GUESSES ? 1 : 0); i < MAX_GUESSES; i++) {",
          "    boardRows.push(<Row key={i} guess={null} solution={solution} isCurrentGuess={false} />);",
          "  }",
          "",
          "  return (",
          "    <div className=\"board\">",
          "      {boardRows}",
          "    </div>",
          "  );",
          "}",
          "",
          "export default Board;"
        ],
        "command": null
      },
      {
        "kind": "code",
        "filename": ".\\src\\components\\Keyboard.js",
        "code": [
          "import React from 'react';",
          "",
          "function Keyboard({ onKeyClick, guessedLetters }) {",
          "  const rows = [",
          "    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],",
          "    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],",
          "    ['Enter', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'Backspace']",
          "  ];",
          "",
          "  const getKeyStatus = (key) => {",
          "    if (guessedLetters[key]) {",
          "      return guessedLetters[key]; // 'correct', 'present', 'absent'",
          "    }",
          "    return ''; // No status yet",
          "  };",
          "",
          "  return (",
          "    <div className=\"keyboard\">",
          "      {rows.map((row, rowIndex) => (",
          "        <div key={rowIndex} className=\"keyboard-row\">",
          "          {row.map((key) => (",
          "            <button",
          "              key={key}",
          "              className={`key ${getKeyStatus(key)} ${key.length > 1 ? 'wide-key' : ''}`}",
          "              onClick={() => onKeyClick(key)}",
          "            >",
          "              {key}",
          "            </button>",
          "          ))}",
          "        </div>",
          "      ))}",
          "    </div>",
          "  );",
          "}",
          "",
          "export default Keyboard;"
        ],
        "command": null
      },
      {
        "kind": "code",
        "filename": ".\\src\\components\\Popup.js",
        "code": [
          "import React from 'react';",
          "",
          "function Popup({ message, solution, onClose }) {",
          "  if (!message) return null;",
          "",
          "  return (",
          "    <div className=\"popup-overlay\">",
          "      <div className=\"popup-content\">",
          "        <h2>{message}</h2>",
          "        {solution && message !== \"You won!\" && <p>The word was: <strong>{solution}</strong></p>}",
          "        <button onClick={onClose}>Play Again</button>",
          "      </div>",
          "    </div>",
          "  );",
          "}",
          "",
          "export default Popup;"
        ],
        "command": null
      },
      {
        "kind": "code",
        "filename": ".\\src\\App.js",
        "code": [
          "import React, { useState, useEffect, useCallback } from 'react';",
          "import Board from './components/Board';",
          "import Keyboard from './components/Keyboard';",
          "import Popup from './components/Popup';",
          "import { wordlist, possibleAnswers } from './data/wordlist';",
          "import './App.css';",
          "",
          "const MAX_GUESSES = 6;",
          "const WORD_LENGTH = 5;",
          "",
          "const getRandomWord = () => {",
          "  return possibleAnswers[Math.floor(Math.random() * possibleAnswers.length)];",
          "};",
          "",
          "function App() {",
          "  const [solution, setSolution] = useState(getRandomWord);",
          "  const [guesses, setGuesses] = useState([]); // Array of submitted guess strings",
          "  const [currentGuess, setCurrentGuess] = useState('');",
          "  const [gameStatus, setGameStatus] = useState('playing'); // 'playing', 'won', 'lost'",
          "  const [popupMessage, setPopupMessage] = useState('');",
          "  const [guessedLetters, setGuessedLetters] = useState({}); // { A: 'correct', B: 'present', C: 'absent' }",
          "",
          "  const handleKeyInput = useCallback((key) => {",
          "    if (gameStatus !== 'playing') return;",
          "",
          "    if (key === 'Backspace') {",
          "      setCurrentGuess((prev) => prev.slice(0, -1));",
          "    } else if (key === 'Enter') {",
          "      if (currentGuess.length !== WORD_LENGTH) {",
          "        setPopupMessage('Not enough letters');",
          "        setTimeout(() => setPopupMessage(''), 1500);",
          "        return;",
          "      }",
          "      if (!wordlist.includes(currentGuess) && !possibleAnswers.includes(currentGuess)) {",
          "        setPopupMessage('Not in word list');",
          "        setTimeout(() => setPopupMessage(''), 1500);",
          "        return;",
          "      }",
          "",
          "      const newGuesses = [...guesses, currentGuess];",
          "      setGuesses(newGuesses);",
          "      updateGuessedLetters(currentGuess);",
          "",
          "      if (currentGuess === solution) {",
          "        setGameStatus('won');",
          "        setPopupMessage('You won!');",
          "      } else if (newGuesses.length === MAX_GUESSES) {",
          "        setGameStatus('lost');",
          "        setPopupMessage('You lost!');",
          "      }",
          "      setCurrentGuess('');",
          "    } else if (key.length === 1 && key.match(/[a-zA-Z]/) && currentGuess.length < WORD_LENGTH) {",
          "      setCurrentGuess((prev) => (prev + key.toUpperCase()));",
          "    }",
          "  }, [currentGuess, guesses, gameStatus, solution]);",
          "",
          "  const updateGuessedLetters = (latestGuess) => {",
          "    const newGuessedLetters = { ...guessedLetters };",
          "    const solutionLetters = solution.split('');",
          "    const guessLetters = latestGuess.split('');",
          "",
          "    // Count occurrences of letters in the solution for accurate 'present' status",
          "    const solutionLetterCounts = {};",
          "    solutionLetters.forEach(char => {",
          "      solutionLetterCounts[char] = (solutionLetterCounts[char] || 0) + 1;",
          "    });",
          "",
          "    const currentGuessStatuses = Array(WORD_LENGTH).fill('');",
          "",
          "    // First pass: Mark 'correct' letters",
          "    for (let i = 0; i < WORD_LENGTH; i++) {",
          "      if (guessLetters[i] === solutionLetters[i]) {",
          "        currentGuessStatuses[i] = 'correct';",
          "        solutionLetterCounts[guessLetters[i]]--;",
          "      }",
          "    }",
          "",
          "    // Second pass: Mark 'present' and 'absent' letters",
          "    for (let i = 0; i < WORD_LENGTH; i++) {",
          "      const char = guessLetters[i];",
          "      if (currentGuessStatuses[i] === '') { // Only process if not already marked 'correct'",
          "        if (solutionLetterCounts[char] > 0) {",
          "          currentGuessStatuses[i] = 'present';",
          "          solutionLetterCounts[char]--;",
          "        } else {",
          "          currentGuessStatuses[i] = 'absent';",
          "        }",
          "      }",
          "    }",
          "",
          "    // Update overall keyboard status based on the strongest status for each letter",
          "    guessLetters.forEach((char, index) => {",
          "      const status = currentGuessStatuses[index];",
          "      if (status === 'correct' || (status === 'present' && newGuessedLetters[char] !== 'correct') || (status === 'absent' && !newGuessedLetters[char])) {",
          "        newGuessedLetters[char] = status;",
          "      }",
          "    });",
          "",
          "    setGuessedLetters(newGuessedLetters);",
          "  };",
          "",
          "  useEffect(() => {",
          "    const handlePhysicalKeyboard = (event) => {",
          "      handleKeyInput(event.key);",
          "    };",
          "    window.addEventListener('keydown', handlePhysicalKeyboard);",
          "    return () => {",
          "      window.removeEventListener('keydown', handlePhysicalKeyboard);",
          "    };",
          "  }, [handleKeyInput]);",
          "",
          "  const handleRestartGame = () => {",
          "    setSolution(getRandomWord());",
          "    setGuesses([]);",
          "    setCurrentGuess('');",
          "    setGameStatus('playing');",
          "    setPopupMessage('');",
          "    setGuessedLetters({});",
          "  };",
          "",
          "  return (",
          "    <div className=\"App\">",
          "      <h1>Wordle</h1>",
          "      <Board guesses={guesses} currentGuess={currentGuess} solution={solution} />",
          "      <Keyboard onKeyClick={handleKeyInput} guessedLetters={guessedLetters} />",
          "      <Popup",
          "        message={popupMessage}",
          "        solution={solution}",
          "        onClose={handleRestartGame}",
          "      />",
          "    </div>",
          "  );",
          "}",
          "",
          "export default App;"
        ],
        "command": null
      },
      {
        "kind": "code",
        "filename": ".\\src\\App.css",
        "code": [
          ".App {",
          "  text-align: center;",
          "  display: flex;",
          "  flex-direction: column;",
          "  align-items: center;",
          "  width: 100%;",
          "  max-width: 500px;",
          "}",
          "",
          ".board {",
          "  display: grid;",
          "  grid-template-rows: repeat(6, 1fr);",
          "  gap: 5px;",
          "  margin-bottom: 30px;",
          "  width: 100%;",
          "  max-width: 350px;",
          "  height: 420px; /* 6 rows * 60px height + 5px gap * 5 */",
          "}",
          "",
          ".row {",
          "  display: grid;",
          "  grid-template-columns: repeat(5, 1fr);",
          "  gap: 5px;",
          "  width: 100%;",
          "}",
          "",
          ".cell {",
          "  width: 100%;",
          "  height: 60px;",
          "  display: flex;",
          "  justify-content: center;",
          "  align-items: center;",
          "  font-size: 2em;",
          "  font-weight: bold;",
          "  color: #fff;",
          "  border: 2px solid #3a3a3c;",
          "  box-sizing: border-box;",
          "  text-transform: uppercase;",
          "}",
          "",
          ".cell.filled {",
          "  border-color: #565758;",
          "}",
          "",
          ".cell.correct {",
          "  background-color: #538d4e;",
          "  border-color: #538d4e;",
          "}",
          "",
          ".cell.present {",
          "  background-color: #b59f3b;",
          "  border-color: #b59f3b;",
          "}",
          "",
          ".cell.absent {",
          "  background-color: #3a3a3c;",
          "  border-color: #3a3a3c;",
          "}",
          "",
          ".keyboard {",
          "  width: 100%;",
          "  max-width: 500px;",
          "  margin-top: 20px;",
          "}",
          "",
          ".keyboard-row {",
          "  display: flex;",
          "  justify-content: center;",
          "  margin-bottom: 8px;",
          "  gap: 6px;",
          "}",
          "",
          ".key {",
          "  background-color: #818384;",
          "  color: #fff;",
          "  border: none;",
          "  border-radius: 4px;",
          "  font-size: 1.1em;",
          "  font-weight: bold;",
          "  padding: 15px 10px;",
          "  cursor: pointer;",
          "  flex-grow: 1;",
          "  text-transform: uppercase;",
          "  transition: background-color 0.2s ease-in-out;",
          "  min-width: 40px;",
          "}",
          "",
          ".key:hover {",
          "  background-color: #929292;",
          "}",
          "",
          ".key.wide-key {",
          "  flex-grow: 1.5;",
          "  padding: 15px 15px;",
          "}",
          "",
          ".key.correct {",
          "  background-color: #538d4e;",
          "}",
          "",
          ".key.present {",
          "  background-color: #b59f3b;",
          "}",
          "",
          ".key.absent {",
          "  background-color: #3a3a3c;",
          "}",
          "",
          ".key.correct:hover,",
          ".key.present:hover,",
          ".key.absent:hover {",
          "  filter: brightness(1.1);",
          "}",
          "",
          ".popup-overlay {",
          "  position: fixed;",
          "  top: 0;",
          "  left: 0;",
          "  right: 0;",
          "  bottom: 0;",
          "  background: rgba(0, 0, 0, 0.7);",
          "  display: flex;",
          "  justify-content: center;",
          "  align-items: center;",
          "  z-index: 1000;",
          "}",
          "",
          ".popup-content {",
          "  background: #1a1a1b;",
          "  padding: 40px;",
          "  border-radius: 8px;",
          "  text-align: center;",
          "  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);",
          "  max-width: 400px;",
          "  width: 90%;",
          "}",
          "",
          ".popup-content h2 {",
          "  color: #fff;",
          "  margin-bottom: 20px;",
          "  font-size: 2em;",
          "}",
          "",
          ".popup-content p {",
          "  color: #bbb;",
          "  margin-bottom: 30px;",
          "  font-size: 1.1em;",
          "}",
          "",
          ".popup-content button {",
          "  background-color: #538d4e;",
          "  color: #fff;",
          "  border: none;",
          "  padding: 12px 25px;",
          "  border-radius: 4px;",
          "  font-size: 1.1em;",
          "  cursor: pointer;",
          "  transition: background-color 0.2s ease;",
          "}",
          "",
          ".popup-content button:hover {",
          "  background-color: #6aaa64;",
          "}"
        ],
        "command": null
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "npm start"
      }
    ]
  }
]