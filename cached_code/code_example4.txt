[
  {
    "commands": [
      {
        "kind": "code",
        "filename": "tic_tac_toe.py",
        "code": [
          "import tkinter as tk",
          "from tkinter import messagebox",
          "",
          "class TicTacToe:",
          "    def __init__(self, master):",
          "        self.master = master",
          "        master.title(\"Tic-Tac-Toe\")",
          "",
          "        self.board = [[\"\" for _ in range(3)] for _ in range(3)]",
          "        self.current_player = \"X\"",
          "        self.game_over = False",
          "",
          "        self.buttons = []",
          "        for r in range(3):",
          "            row_buttons = []",
          "            for c in range(3):",
          "                button = tk.Button(master, text=\"\", font=('normal', 40), width=5, height=2,",
          "                                   command=lambda r=r, c=c: self.button_click(r, c))",
          "                button.grid(row=r, column=c, padx=5, pady=5)",
          "                row_buttons.append(button)",
          "            self.buttons.append(row_buttons)",
          "",
          "        self.status_label = tk.Label(master, text=f\"Player {self.current_player}'s turn\", font=('normal', 20))",
          "        self.status_label.grid(row=3, column=0, columnspan=3, pady=10)",
          "",
          "        self.reset_button = tk.Button(master, text=\"Reset Game\", font=('normal', 15), command=self.reset_game)",
          "        self.reset_button.grid(row=4, column=0, columnspan=3, pady=10)",
          "",
          "    def button_click(self, r, c):",
          "        if self.board[r][c] == \"\" and not self.game_over:",
          "            self.board[r][c] = self.current_player",
          "            self.buttons[r][c].config(text=self.current_player)",
          "            ",
          "            if self.check_win():",
          "                self.status_label.config(text=f\"Player {self.current_player} wins!\")",
          "                self.game_over = True",
          "                self.disable_all_buttons()",
          "            elif self.check_draw():",
          "                self.status_label.config(text=\"It's a Draw!\")",
          "                self.game_over = True",
          "                self.disable_all_buttons()",
          "            else:",
          "                self.current_player = \"O\" if self.current_player == \"X\" else \"X\"",
          "                self.status_label.config(text=f\"Player {self.current_player}'s turn\")",
          "",
          "    def check_win(self):",
          "        # Check rows",
          "        for r in range(3):",
          "            if self.board[r][0] == self.board[r][1] == self.board[r][2] != \"\":",
          "                return True",
          "        # Check columns",
          "        for c in range(3):",
          "            if self.board[0][c] == self.board[1][c] == self.board[2][c] != \"\":",
          "                return True",
          "        # Check diagonals",
          "        if self.board[0][0] == self.board[1][1] == self.board[2][2] != \"\":",
          "            return True",
          "        if self.board[0][2] == self.board[1][1] == self.board[2][0] != \"\":",
          "            return True",
          "        return False",
          "",
          "    def check_draw(self):",
          "        for r in range(3):",
          "            for c in range(3):",
          "                if self.board[r][c] == \"\":",
          "                    return False",
          "        return True",
          "",
          "    def disable_all_buttons(self):",
          "        for r in range(3):",
          "            for c in range(3):",
          "                self.buttons[r][c].config(state=tk.DISABLED)",
          "",
          "    def enable_all_buttons(self):",
          "        for r in range(3):",
          "            for c in range(3):",
          "                self.buttons[r][c].config(state=tk.NORMAL)",
          "",
          "    def reset_game(self):",
          "        self.board = [[\"\" for _ in range(3)] for _ in range(3)]",
          "        self.current_player = \"X\"",
          "        self.game_over = False",
          "        self.status_label.config(text=f\"Player {self.current_player}'s turn\")",
          "        self.enable_all_buttons()",
          "        for r in range(3):",
          "            for c in range(3):",
          "                self.buttons[r][c].config(text=\"\")",
          "",
          "if __name__ == \"__main__\":",
          "    root = tk.Tk()",
          "    game = TicTacToe(root)",
          "    root.mainloop()"
        ],
        "command": null
      },
      {
        "kind": "command",
        "filename": null,
        "code": null,
        "command": "python tic_tac_toe.py"
      }
    ]
  }
]